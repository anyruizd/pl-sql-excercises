SQL> SELECT to_char(SYSDATE, 'DD Month Year Day HH:MI:SS Am')
  2  FROM dual;

TO_CHAR(SYSDATE,'DDMONTHYEARDAYHH:MI:SSAM')                                     
--------------------------------------------------------------------------------
                            07 December Twenty Twenty-Two Wednesday    03:43:02 Am

SQL> /*
  2
  3      Question 1: (use schemas des02 with script 7clearwater)
  4      We need to know WHO, and WHEN the table CUSTOMER is
  5      modified.
  6      Create table, sequence, and trigger to record the needed information.
  7      Test your trigger!
  8
  9  */

SQL> connect des02/des02@localhost:1521/XE;

Connected.

SQL> create sequence cust_audit_seq;

Sequence created.

SQL> create table cust_audit(cust_audit_id number, date_updated date, updating_user varchar(20));

Table created.

SQL> create or replace trigger cust_audit_trigger
  2  after insert or update or delete on customer
  3  BEGIN
  4      insert into cust_audit
  5      values(cust_audit_seq.NEXTVAL, sysdate, user);
  6  END;
  7  /

Trigger created.

Commit complete.

SQL> grant select, insert, update, delete on customer to vampirito;

Grant succeeded.

SQL> grant select, insert, update, delete on customer to halley;

Grant succeeded.

SQL> connect vampirito/vampirito@localhost:1521/XE;

Connected.

SQL> UPDATE des02.customer SET c_city = 'Medellin'
  2  WHERE c_id = 6;

1 row updated.

Commit complete.

SQL> commit;

Commit complete.

SQL> connect halley/halley@localhost:1521/XE;

Connected.

SQL> UPDATE des02.customer SET c_city = 'Montreal'
  2  WHERE c_id = 4;

1 row updated.

Commit complete.

SQL> commit;

Commit complete.

SQL> connect des02/des02@localhost:1521/XE;

Connected.

SQL> SELECT cust_audit_id, TO_CHAR(date_updated, 'DD-MM-YYYY HH:MI:SS AM'),
  2  updating_user FROM  cust_audit;

CUST_AUDIT_ID TO_CHAR(DATE_UPDATED,'DD-MM-YYYYHH:MI:SSAM') UPDATING_USER       
------------- -------------------------------------------- --------------------
            2 07-12-2022 03:36:17 AM                       HALLEY              
            1 07-12-2022 03:36:13 AM                       VAMPIRITO           

SQL> /*
  2      Question 2:
  3
  4      Table ORDER_LINE is subject to INSERT, UPDATE, and
  5      DELETE, create a trigger to record who, when, and the action
  6      performed on the table order_line in a table called order_line_audit.
  7      (hint: use UPDATING, INSERTING, DELETING to verify for
  8      action performed. For example: IF UPDATING THEN â€¦)
  9      Test your trigger!
  10
  11  */
SQL> create sequence order_line_audit_seq;

Sequence created.

SQL> create table order_line_audit(ol_audit_id number, date_updated date, updating_user varchar(20), action_performed VARCHAR2(30));

Table created.

SQL> create or replace trigger order_line_audit_trigger
  2  after insert or update or delete on order_line
  3  BEGIN
  4      IF INSERTING THEN
  5          INSERT INTO order_line_audit
  6          VALUES(order_line_audit_seq.NEXTVAL, sysdate, user,'INSERT');
  7      ELSIF UPDATING THEN
  8          INSERT INTO order_line_audit
  9          VALUES(order_line_audit_seq.NEXTVAL, sysdate, user,'UPDATE');
  10      ELSIF DELETING THEN
  11          INSERT INTO order_line_audit
  12          VALUES(order_line_audit_seq.NEXTVAL, sysdate, user,'DELETE');
  13      END IF;
  14  END;
  15  /

Trigger created.

Commit complete.

SQL> grant select, insert, update, delete on order_line to vampirito;

Grant succeeded.

SQL> grant select, insert, update, delete on order_line to halley;

Grant succeeded.

SQL> -- vampirito
SQL> connect vampirito/vampirito@localhost:1521/XE;

Connected.


SQL> UPDATE des02.order_line SET ol_quantity = 5
  2  WHERE o_id = 1 and inv_id = 3;

0 row updated.

Commit complete.

SQL> commit;

Commit complete.


SQL> INSERT INTO des02.order_line
  2  VALUES(6,11,4);

1 row created.

Commit complete.

SQL> commit;

Commit complete.

SQL> DELETE FROM des02.order_line
  2  WHERE o_id = 5 AND inv_id = 19;

0 row deleted.

Commit complete.

SQL> commit;

Commit complete.

SQL> connect halley/halley@localhost:1521/XE;

Connected.

SQL> UPDATE des02.order_line SET ol_quantity = 5
  2  WHERE o_id = 6 and inv_id = 7;

1 row updated.

Commit complete.

SQL> commit;

Commit complete.

SQL> connect des02/des02@localhost:1521/XE;

Connected.


SQL> SELECT ol_audit_id, TO_CHAR(date_updated, 'DD-MM-YYYY HH:MI:SS AM'),
  2  updating_user, action_performed FROM  order_line_audit;

OL_AUDIT_ID TO_CHAR(DATE_UPDATED,'DD-MM-YYYYHH:MI:SSAM') UPDATING_USER       
----------- -------------------------------------------- --------------------
ACTION_PERFORMED              
------------------------------
          1 07-12-2022 03:36:55 AM                       VAMPIRITO           
DELETE                        
          2 07-12-2022 03:39:43 AM                       VAMPIRITO           
UPDATE                        
          3 07-12-2022 03:40:27 AM                       VAMPIRITO           
INSERT                        
          4 07-12-2022 03:40:32 AM                       VAMPIRITO           
DELETE                        
          5 07-12-2022 03:40:37 AM                       HALLEY              
UPDATE                        

SQL> /*
  2
  3      Question 3: (use script 7clearwater des02)
  4      Create a table called order_line_row_audit to record who, when,
  5      and the OLD value of ol_quantity every time the data of table
  6      ORDER_LINE is updated.
  7      Test your trigger!
  8
  9  */
SQL> CREATE sequence order_line_row_audit_seq;

Sequence created.

SQL> CREATE TABLE order_line_row_audit(row_number NUMBER, date_updated DATE, updating_user VARCHAR2(30),
  2                old_o_id number, old_inv_id number, old_ol_quantity NUMBER);

TABLE created.

SQL> CREATE OR REPLACE TRIGGER order_line_row_audit_trigger
  2  AFTER UPDATE ON order_line
  3  FOR EACH ROW
  4    BEGIN
  5      INSERT INTO order_line_row_audit
  6      VALUES(order_line_row_audit_seq.NEXTVAL, sysdate, user, :OLD.o_id, :OLD.inv_id, :OLD.ol_quantity);
  7    END;
  8  /

TRIGGER created.

Commit complete.

SQL> -- vampirito
SQL> connect vampirito/vampirito@localhost:1521/XE;

Connected.

SQL> UPDATE des02.order_line SET ol_quantity = 5
  2  WHERE o_id = 1 and inv_id = 14;

1 row updated.

Commit complete.

SQL> commit;

Commit complete.

SQL> -- des02
SQL> connect des02/des02@localhost:1521/XE;

Connected.

SQL> SELECT ROW_NUMBER, TO_CHAR(date_updated, 'DD-MM-YYYY HH:MI:SS Am') as modDate, updating_user, old_o_id, old_inv_id, old_ol_quantity FROM order_line_row_audit;

ROW_NUMBER MODDATE                UPDATING_USER                    OLD_O_ID
---------- ---------------------- ------------------------------ ----------
OLD_INV_ID OLD_OL_QUANTITY
---------- ---------------
         1 07-12-2022 03:41:46 Am VAMPIRITO                               1
        14               5

SQL> spool off;

