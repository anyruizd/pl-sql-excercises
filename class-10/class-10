-- FOR LOOP
-- Create a procedure to display the number 0 to 10 on the screen using basic LOOP

CREATE OR REPLACE PROCEDURE P_OCT14_EX1 AS
    V_COUNTER NUMBER := 0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('BASIC LOOP' || V_COUNTER);
        V_COUNTER := V_COUNTER + 1;
    EXIT WHEN V_COUNTER > 10;
    END LOOP;
END;
/

-- SET SERVER OUTPUT ON
EXEC P_OCT14_EX1

-- WHILE LOOP
-- Create a procedure to display the number 0 to 10 on the screen using the while loop

CREATE OR REPLACE PROCEDURE P_OCT14_EX2 AS
    V_COUNTER NUMBER := 0;
BEGIN
    while V_COUNTER <= 10 LOOP
        DBMS_OUTPUT.PUT_LINE('WHILE LOOP ' || V_COUNTER);
        V_COUNTER := V_COUNTER + 1;
    END LOOP;
END;
/

EXEC P_OCT14_EX2()

-- 3 FOR LOOP
-- Create a procedure to display the number 0 to 10 using for loop

CREATE OR REPLACE PROCEDURE P_OCT14_EX3 AS
BEGIN
    FOR SB IN 0 .. 10 LOOP
        DBMS_OUTPUT.PUT_LINE('FOR LOOP '|| SB);
    END LOOP;
END;
/

EXEC P_OCT14_EX3()

-- Display the number 10 to 0

CREATE OR REPLACE PROCEDURE P_OCT14_EX4 AS
BEGIN
    FOR SB IN reverse 0 .. 10 LOOP
        DBMS_OUTPUT.PUT_LINE('FOR LOOP '|| SB);
    END LOOP;
END;
/

EXEC P_OCT14_EX4()

-------- CURSOR

-- IMPLICIT: IN SQL DISPLAYS IMPLICITLY ROW BY ROW
SELECT EMPNO, ENAME, SAL
FROM EMP

-- EXPLICIT: IN PL/SQL WHEN YOU HAVE TO HANDLE MULTIPLE ROWS MANUALLY WITH
-- WE HAVE TO DO 4 STEPS:
-- 1. DECLARATION (DONE IN THE DECLARATION SECTON)
--    CURSOR NAME_OF_CURSOR IS
--        SELECT STATEMENT;

CURSOR EMP_CUR IS
    SELECT EMPNO, ENAME, SAL
    FROM EMP;

-- 2. OPEN (DONE IN THE EXECUTABLE SECTION)
-- OPEN NAME_OF_CURSOR;

OPEN EMP_CUR;

-- RESULT: 
-- CURSOR ATTRIBUTE %ISOPEN IS SET TO TRUE
-- THE SELECT IS EXECUTED AND DATA IF FOUND WILL BE SENT TO THE MEMORY AREA NAMED ACTIVE SET

-- 3. FETCH (DONE IN THE EXECUTABLE FUNCTION)
-- FETCH NAME_OF_CURSOR INTO VARIABLES;
-- RESULT: 
-- A. A SUCCESSFUL FETCH, WHEN DATA EXIST IN THE ACTIVE SET
-- DATA OF THE ACTIVE SET IS SENT TO THE VARIABLES
-- CURSOR ATTRIBUTE %FOUND IS SET TO TRUE
-- CURSOR ATTRIBUTE %NOTFOUND IS SET TO FALSE
-- CURSOR ATTRIBUTE %ROWCOUNT IS INCREASED BY 1
-- A. UNSUCCESSFUL FETCH, WHEN DATA DOES NOT EXIST IN THE ACTIVE SET
-- NO DATA IS SENT TO THE VARIABLES
-- CURSOR ATTRIBUTE %FOUND IS SET TO FALSE
-- CURSOR ATTRIBUTE %NOTFOUND IS SET TO TRUE
-- CURSOR ATTRIBUTE %ROWCOUNT REMAINS UNCHANGE

-- NO EXCEPTION IS RAISED, SO I HAVE TO HANDLE MANUALLY WITH THE CURSOR ATTRIBUTES

-- 4. CLOSE THE CURSOR (DONE IN THE EXECUTABLE SECTION)
-- CLOSE NAME_OF_CURSOR

-- RESULT:
-- CURSOR ATTRIBUTE %ISOPEN IS SET TO FALSE
-- MEMORY OCCUPIED BY THE ACTIVE SET IS RETURNED TO THE SYSTEM

-- CREATE A PROCEDURE TO UPDATE THE SALARY OF ALL EMPLOYEES USING THE SCALE BELOW:
-- >= 5000 5%
-- 4000 - 4999 10%
-- 3000 - 2999 15%
-- 2000 - 2999 20%
-- >0          25%

-- THE PROCEDURE WILL DISPLAY THE FOLLOWINGL
-- EMPLOYEE NUMBER X IS Y. HE IS A Z, WITH M% INCREASE IN SALARY $N IS NOW $O

CREATE OR REPLACE PROCEDURE P_OCT14_EX5 AS
-- STEP 1
    CURSOR EMP_CUR IS
        SELECT EMPNO, ENAME, JOB, SAL
        FROM  EMP;
    V_EMPNO EMP.EMPNO%TYPE;
    V_ENAME EMP.ENAME%TYPE;
    V_JOB EMP.JOB%TYPE;
    V_SAL EMP.SAL%TYPE;
    V_NEW_SAL EMP.SAL%TYPE;
    V_PERCENT_INC NUMBER;
BEGIN
    -- STEP 2
    OPEN EMP_CUR;

    -- STEP 3
    FETCH EMP_CUR INTO V_EMPNO, V_ENAME, V_JOB, V_SAL;
        WHILE EMP_CUR%FOUND LOOP
            IF V_SAL >= 5000 THEN
                V_PERCENT_INC := 5/100;
            ELSIF V_SAL > 4000 THEN
                V_PERCENT_INC := 10/100;
            ELSIF V_SAL > 3000 THEN
                V_PERCENT_INC := 15/100;
            ELSIF V_SAL > 2000 THEN
                V_PERCENT_INC := 20/100;
            ELSIF V_SAL > 0 THEN
                V_PERCENT_INC := 25/100;
            END IF;
            V_NEW_SAL := V_SAL*(1+ V_PERCENT_INC);
            UPDATE EMP SET SAL = V_NEW_SAL WHERE EMPNO = V_EMPNO;
            DBMS_OUTPUT.PUT_LINE('EMPLOYEE NUMBER ' || V_EMPNO || ' IS ' || V_ENAME || '. HE IS A ' || V_JOB || '. ');
            DBMS_OUTPUT.PUT_LINE('WITH %' || (V_PERCENT_INC*100) || ' INCREASE IN SALARY. HIS OLD SALARY OF $' || V_SAL || ' IS NOW $' || V_NEW_SAL || '.');
        FETCH EMP_CUR INTO V_EMPNO, V_ENAME, V_JOB, V_SAL;
    END LOOP;

    -- STEP 4
    CLOSE EMP_CUR;
    COMMIT; 
END; 
/

EXEC P_OCT14_EX5